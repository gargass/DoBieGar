{
    "contents" : "#Loading packages\nlibrary(shiny)\nlibrary(survival)\n# library(survMisc)\nlibrary(grid)\nlibrary(gridExtra)\nlibrary(reshape2)\nlibrary(ggplot2)\nlibrary(pheatmap)\nlibrary(DT)\nlibrary(scales)\n\n#Loading datasets\nnowotwory <- list(\"GBMLGG\", \"BRCA\", \"KIPAN\", \"COADREAD\", \"STES\", \"GBM\", \"OV\",\n                  \"UCEC\", \"KIRC\", \"HNSC\", \"LUAD\", \"LGG\", \"LUSC\", \"THCA\")\n\nfor(nowotwor in nowotwory){\n  assign(paste('zbior.', nowotwor, sep=\"\"), read.table(paste('data/', nowotwor, '.txt', sep=\"\")))\n  assign(paste('geny_wspolne_', nowotwor, sep=\"\"), read.table(paste('data/wspolne_', nowotwor, '.txt', sep=\"\")))\n  assign(paste('geny_wspolne_licznosci_', nowotwor, sep=\"\"), read.table(paste('data/wspolne_', nowotwor, '_licznosci.txt', sep=\"\")))\n  \n}\n\ngeny <- read.table('data/lista_interesujacych_genow.txt', h=T)\ngeny <- as.matrix(geny)\n\np_value_tabela <-read.table('data/p_value_NA.txt', h=T)\nczestosci<-read.table('data/czestosci.txt', h=T)\nlicznosci<-read.table('data/licznosci.txt', h=T)\n\n# for(nowotwor in nowotwory){\n#   assign(paste('p_value.', nowotwor, sep=\"\"), read.table(paste('data/P_value_dla_interesujacych_genow/', \n#                                                                nowotwor, '_pvalue.txt', sep=\"\"), h=T))\n# }\n\nfor(nowotwor in nowotwory){\n  assign(paste(nowotwor, '_variant', sep=\"\"), read.table(paste('data/', nowotwor, '_variant.txt', sep=\"\")))\n}\n\nczestosci_variant <- read.table(\"data/czestosci_variant.txt\", h=T)\n\n\n\n#Shiny\nshinyServer(function(input, output) {\n\n#summary on gene mutation\n\n#Table\n  output$table_new <- renderDataTable({\n    gen <- input$geny\n    \n    nowotwory_all <- c(\"GBMLGG\", \"BRCA\", \"KIPAN\", \"COADREAD\", \"STES\", \"GBM\", \"OV\",\n                       \"UCEC\", \"KIRC\", \"HNSC\", \"LUAD\", \"LGG\", \"LUSC\", \"THCA\")\n    \n    \n    freq <- round(as.numeric(czestosci[czestosci$gen==gen,nowotwory_all]),3)\n    \n    dane<- data.frame(matrix(0, nrow=14, ncol=4))\n    colnames(dane) <- c(\"cancer\", \"freq\", \"n\", \"pvalue\")\n    dane$cancer <-nowotwory_all\n    dane$freq<-freq\n    dane$n <- as.numeric(licznosci[licznosci$gen==gen, nowotwory_all])\n    pv<-as.numeric(p_value_tabela[p_value_tabela$gen==gen, nowotwory_all])\n    for (i in 1:length(nowotwory))\n    {\n      pv[i]<-signif(pv[i], 3)\n    }\n    dane$pvalue <- pv    \n    colnames(dane)<-c('Cancer', 'Mutation frequency', 'Number of patients with mutation', 'Significance')\n    dane\n  }, options = list(columnDefs= list(list(className = 'dt-right', targets='_all')), dom = 't', lengthMenu = c(20, 30)))\n\n\n#Survival Curves - Presence of mutation\n  \n#Curves\noutput$survcurves_yesno <- renderPlot({\n  validate(\n    need(input$nowotwory != \"\", \"Please select a cancer!\")\n  )\n  nowotwory <- input$nowotwory\n  gen <- input$geny\n  \n  max_time <- 0\n  for(nowotwor in nowotwory){\n    zbior <- get(paste('zbior.', nowotwor, sep=\"\"))\n    time <- as.numeric(as.character(zbior$time))\n    time <- max(time, na.rm = TRUE)\n    max_time <- ifelse(time>max_time, time, max_time)\n  }    \n  \n  n <- length(nowotwory)\n  \n  p <- lapply(nowotwory, function(nowotwor){\n    pvalue = p_value_tabela[p_value_tabela$gen == gen, nowotwor]\n    pvalue <- signif(pvalue, 3)\n    \n    nowotwor_gen.fit <- survfit(Surv(as.numeric(as.character(time)), status) ~ get(paste('zbior.', nowotwor, sep=\"\"))[,gen], \n                                data=get(paste('zbior.', nowotwor, sep=\"\")))\n    \n    if (sum(get(paste('zbior.', nowotwor, sep=\"\"))[,gen])==0){\n      mutation <- \"No Mutation\"\n    }\n    else{\n      mutation <- c(\"No Mutation\", \"Mutation\")\n    }\n    \n    survMisc::autoplot(nowotwor_gen.fit, legLabs = mutation,\n                       legTitle=paste('P-value: ', pvalue),\n                       title=nowotwor, censSize=2)$plot + \n      ylim(c(0,1)) + \n      xlim(c(0, max_time)) + \n      xlab(\"Time in days\") + \n      ylab(\"Survival\") +\n      theme(legend.position = c(0.85, 0.9)) + \n      theme(legend.title = element_text(colour=ifelse(pvalue<0.05,\"red\", \"black\"), face=\"bold\"))\n  })\n  \n  if(n <= 4){\n    ncol <- 2\n    nrow <- 2\n  }\n  else{\n    ncol <- ceiling(sqrt(n))\n    nrow <- ceiling(n/ceiling(sqrt(n)))\n  }\n  \n  marrangeGrob(p, ncol = ncol, nrow = nrow, top=NULL)\n  \n}, height = 800)\n\n\n#Co-occuring genes\n\n#Table\n\noutput$co_occuring_table<-renderDataTable({\n  validate(\n    need(input$nowotwory != \"\", \"Please select a cancer!\")\n  )\n  gen <- input$geny\n  nowotwory <- input$nowotwory\n  \n  tabela<-NULL\n  for(nowotwor in nowotwory){\n    \n    gen_x_gen <- get(paste('geny_wspolne_', nowotwor, sep=\"\"))\n    geny <- rownames(gen_x_gen)[-which(rownames(gen_x_gen) == gen)]\n    freq <- round(as.numeric(gen_x_gen[geny, gen]),2)\n    gen_y_gen<-get(paste('geny_wspolne_licznosci_', nowotwor, sep=\"\"))\n    n <- gen_y_gen[geny, gen]\n    freq_n <- paste(freq, ' (', n, ')', sep=\"\")\n    tabela <- cbind(tabela, freq_n)\n \n  }\n\n  rownames(tabela) <- geny\n  col<-NULL\n  for (i in 1:length(nowotwory))\n  {\n  col <- append(col,nowotwory[i])\n  }\n  colnames(tabela)<-col\n  tabela\n}, options = list( columnDefs = list(list(className = 'dt-right', targets='_all'))),filter='bottom')\n\n\n\n#Variant Classification\n#Curves\n  \n  output$survcurves_variant <- renderPlot({\n    validate(\n      need(input$nowotwory != \"\", \"Please select a cancer!\")\n    )\n      nowotwory <- input$nowotwory\n      gen <- input$geny\n      \n      n <- length(nowotwory)\n      \n      nowotwory_variant_all <- NULL\n      for(nowotwor in nowotwory){\n        nowotwor_variant <- get(paste(nowotwor, '_variant', sep=\"\"))\n        nowotwor_variant <- nowotwor_variant[, c(\"patient.barcode\", \"time\", \"status\", paste('Variant.', gen, sep=\"\"))]\n        nowotwor_variant$nowotwor <- nowotwor\n        colnames(nowotwor_variant) <- c(\"patient.barcode\", \"time\", \"status\", \"Variant\", \"nowotwor\")\n              \n        nowotwor_variant$time <- as.numeric(as.character(nowotwor_variant$time))\n              \n        nowotwor_variant$missense <- as.numeric(ifelse(nowotwor_variant$Variant == \"Missense_Mutation\", 1, 0))\n        nowotwor_variant$nonsense <- as.numeric(ifelse(nowotwor_variant$Variant == \"Nonsense_Mutation\", 1, 0))\n        nowotwory_variant_all <- rbind(nowotwory_variant_all, nowotwor_variant[!is.na(nowotwor_variant$Variant),])\n      }    \n \n      max_time <- max(nowotwory_variant_all$time, na.rm = TRUE)\n      \n      p.missense <- lapply(nowotwory, function(nowotwor){\n        pvalue <- \"Brak\"\n        dane <- nowotwory_variant_all[nowotwory_variant_all$nowotwor == nowotwor,]\n        \n        if(nrow(dane)>2){\n          nowotwor_gen.fit.missense <- survfit(Surv(time, status) ~ missense, data=dane)\n          if (length(unique(dane$missense))==1){\n            variant <- \"No Missense\"\n            }\n          else{\n            variant <- c(\"No Missense\", \"Missense\")\n            survdiff <- survdiff(Surv(time, status) ~ missense, data=dane)\n            pvalue <- signif(pchisq(survdiff$chisq, 1, lower=F), 3)\n            }\n          \n          survMisc::autoplot(nowotwor_gen.fit.missense,\n                           legLabs = variant,\n                           legTitle=paste('P-value: ', pvalue),\n                           title=nowotwor, censSize=2)$plot + \n            ylim(c(0,1)) + \n            xlim(c(0, max_time)) + \n            xlab(\"Time in days\") + \n            ylab(\"Survival\") + \n            theme(legend.position = c(0.85, 0.9)) + \n            theme(legend.title = element_text(colour=ifelse(pvalue<0.05,\"red\", \"black\"), face=\"bold\"))\n          }\n        })\n      \n      p.nonsense <- lapply(nowotwory, function(nowotwor){\n        pvalue <- \"NULL\"\n\n        dane <- nowotwory_variant_all[nowotwory_variant_all$nowotwor == nowotwor,]\n\n        if(nrow(dane)>2){\n          nowotwor_gen.fit.nonsense <- survfit(Surv(time, status) ~ nonsense, data=dane)\n          \n          if (length(unique(dane$nonsense))==1){\n            variant <- \"No Nonsense\"\n            }\n          else{\n            variant <- c(\"No Nonsense\", \"Nonsense\")\n            survdiff <- survdiff(Surv(time, status) ~ nonsense, data=dane)\n            pvalue <- signif(pchisq(survdiff$chisq, 1, lower=F), 3)\n            }\n          \n          survMisc::autoplot(nowotwor_gen.fit.nonsense,\n                           legLabs = variant,\n                           legTitle=paste('P-value: ', pvalue),\n                           #title=paste(nowotwor, \"\\n  Nonsense Mutation\", sep=\"\"), censSize=2)$plot + \n                           title=nowotwor, censSize=2)$plot + \n            ylim(c(0,1)) + \n            xlim(c(0, max_time)) + \n            xlab(\"Time in days\") + \n            ylab(\"Survival\") + \n            theme(legend.position = c(0.85, 0.9)) + \n            theme(legend.title = element_text(colour=ifelse(pvalue<0.05,\"red\", \"black\"), face=\"bold\"))\n          }\n        })\n      \n      for (i in 1:length(nowotwory)){ \n        if (i==1){\n          z = p.missense[1]\n        }\n        else{\n          z=append(z , p.missense[i] )\n        }\n        z = append(z, p.nonsense[i])\n      }\n      indeks <- NULL\n      k <- 1\n      for(e in z){\n        if(is.null(e[[1]])){indeks <- append(indeks, k)\n        }\n        k <- k+1\n        }\n      if(!is.null(indeks)){\n        z <- z[-indeks]\n        }\n      if(length(z)>0){\n        marrangeGrob(z, nrow=length(z)/2, ncol=2, top=NULL)\n      }\n      else{\n        validate(\n          need(length(z)>0, \"Too few observations in the selected group!\")\n        )\n      }\n      }, height = 800)\n  \n\n#Variant Classification\n#Table\n  output$table_variant <- renderDataTable({\n    validate(\n      need(input$nowotwory != \"\", \"Please select a cancer!\")\n    )\n    nowotwor <- input$nowotwory\n    gen <- input$geny\n\n    p <- matrix(1, nrow=12, ncol=length(nowotwor))\n    k <- 1\n\n    if(gen %in% colnames(czestosci_variant)){\n      for (nowotworr in nowotwor){\n        dane <- czestosci_variant[which(czestosci_variant$nowotwor==nowotworr), c(\"variant\", gen)]\n        p[3:12, k] <- dane[,2]\n        \n        k <- k + 1\n        }\n    }\n    else{\n      for (nowotworr in nowotwor){\n        p[3:12, k] <- rep(0, 10)\n        \n        k <- k + 1\n      }\n    }\n    \n    for (k in 1:(length(nowotwor)))\n    {\n      if (sum(as.numeric(p[3:12,k]))!=0)\n      {\n   \n      p[3:12,k]= paste(round((100*as.numeric(p[3:12,k]))/sum(as.numeric(p[3:12,k])),2), \"%\", sep=\"\")\n      }\n      else\n      {\n        p[3:12,k]= rep(paste(0, \"%\", sep=\"\"), 10)\n      }\n    }\n    p[1,1:(length(nowotwor))]<-t(licznosci[licznosci$gen==gen, nowotwor])\n    p[2,1:(length(nowotwor))] <- paste(round(100*czestosci[czestosci$gen==gen,nowotwor],3), \"%\", sep=\"\")\n    \n    rownames(p) <- c('Number of patients with mutation', 'Mutation frequency','Missense_Mutation', 'Silent', 'Frame_Shift_Del', 'Frame_Shift_Ins', 'In_Frame_Del', 'Nonsense_Mutation', \n               'RNA', 'Splice_Site', 'In_Frame_Ins', 'Nonstop_Mutation')\n\n    colnames(p) <- c(nowotwor)\n    p\n  },  options = list(columnDefs = list(list(targets=\"_all\", orderable= FALSE)), \n                     dom='t', paging=FALSE))\n\n\n\n  })",
    "created" : 1455409716360.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2918696643",
    "id" : "7FCB602D",
    "lastKnownWriteTime" : 1455409956,
    "path" : "~/DoBieGar/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}